{
  
    
        "post0": {
            "title": "AE Example",
            "content": "Acoustic Emission in python . This module contains a set of functions and classes to ease the processing of acoustic emission signals . Install . pip install acoustic_emission . It has not yet been uploaded to pip, so the best thing would be to download the git project, going to the folder, and from there run the following command: . pip install . . If the setup.py is defined correctly the installation should be ok . How to use . For this example we located some acoustic emission data, and saved the path to the variable f. . With the function read_ae we can read the signal contained in the file . print(f) data = read_ae(f) . M: Schneidtechnik Rotationsprüfstand Messdaten Walze4.0 2020.07.22 Block 18 CSV AEWalze_ 1595408989840 .csv . aeSignal . Once we read the signal we can pass it as the first argument to the class aeSignal . my_signal = aeSignal(data,fs=1e6,file_name = &quot;My Signal&quot;) . To show the signal you can use: . my_signal.plot_signal() . &lt;Figure size 432x288 with 0 Axes&gt; . In the same way it is possible to plot visualize some parameters of it . my_signal.plot_fft() . &lt;AxesSubplot:title={&#39;center&#39;:&#39;fft&#39;}, xlabel=&#39;Frequency (kHz)&#39;&gt; . To perform a hits analysis you may use the following method . my_signal.get_hits(threshold=300) . Area_under_curve Crest-Factor End Energy File_Name Freq_Max_WT_KHz Kurtosis MARSE Peak_2_peak Peak_amplitude RMS Ring_down Skewnes StDev Start Variance Wavelet_Centroid Wavelet_Energy signal_strength . 0 -0.611790 | 3.196290 | 10878526.0 | 4.636324e+16 | My Signal | 3906.25 | 0.151566 | 1.138223 | 2613.0 | 1777.0 | 555.957098 | 45.0 | 0.714149 | 312.498142 | 10877026.0 | 97655.088452 | 141214.938635 | 299148.473178 | 6.897280e+08 | . 1 -0.137538 | 3.055424 | 11313606.0 | 9.231808e+15 | My Signal | 3906.25 | 0.287634 | 0.261735 | 2176.0 | 1516.0 | 496.166846 | 8.0 | 0.688344 | 275.265497 | 11313231.0 | 75771.093803 | 107062.451472 | 255955.934005 | 1.548030e+08 | . 2 -1.597591 | 4.213310 | 11320234.0 | 1.563569e+17 | My Signal | 316406.25 | 2.025361 | 3.503319 | 4395.0 | 2594.0 | 615.668039 | 272.0 | 1.163714 | 363.005837 | 11316109.0 | 131773.237867 | 238245.228319 | 361230.656898 | 2.051224e+09 | . 3 -0.360289 | 3.106313 | 11751896.0 | 3.239226e+16 | My Signal | 3906.25 | 0.624231 | 0.679701 | 3366.0 | 1890.0 | 608.438395 | 35.0 | 0.841388 | 346.698090 | 11751021.0 | 120199.565709 | 124699.043673 | 355007.771606 | 4.374980e+08 | . 4 -0.571139 | 2.805567 | 11755159.0 | 3.735134e+16 | My Signal | 3906.25 | -0.148793 | 1.030927 | 2109.0 | 1400.0 | 499.007933 | 34.0 | 0.525056 | 263.331930 | 11753659.0 | 69343.705593 | 105451.250675 | 240876.815233 | 6.358040e+08 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 335 -0.914754 | 2.907751 | 47420824.0 | 6.353966e+16 | My Signal | 3906.25 | -0.158618 | 1.697191 | 2308.0 | 1504.0 | 517.238248 | 61.0 | 0.581269 | 284.634660 | 47418449.0 | 81016.889511 | 110341.825523 | 256901.894930 | 1.025710e+09 | . 336 -0.238856 | 2.732177 | 47860202.0 | 1.582952e+16 | My Signal | 3906.25 | 0.025536 | 0.420815 | 2203.0 | 1375.0 | 503.261621 | 13.0 | 0.595029 | 272.299345 | 47859577.0 | 74146.933376 | 94606.076032 | 278426.584238 | 2.645200e+08 | . 337 -0.428131 | 2.667297 | 48294957.0 | 2.907564e+16 | My Signal | 3906.25 | -0.396585 | 0.797050 | 2014.0 | 1356.0 | 508.379916 | 22.0 | 0.490776 | 275.750587 | 48293832.0 | 76038.386168 | 101413.001292 | 223815.729210 | 4.804840e+08 | . 338 -0.145425 | 2.531824 | 48731947.0 | 1.088411e+16 | My Signal | 3906.25 | -0.592577 | 0.260603 | 2117.0 | 1364.0 | 538.742036 | 11.0 | 0.493735 | 302.612435 | 48731572.0 | 91574.285753 | 103940.313557 | 262256.172179 | 1.671460e+08 | . 339 -0.608275 | 2.989421 | 48734573.0 | 4.107684e+16 | My Signal | 3906.25 | -0.206131 | 1.147838 | 2053.0 | 1503.0 | 502.772872 | 37.0 | 0.594343 | 280.276146 | 48732948.0 | 78554.718263 | 125978.385315 | 249461.985241 | 6.782810e+08 | . 340 rows × 19 columns . We can visualize one hit in this way . hits = my_signal.get_hits(threshold=300) . sta,end = int(hits.loc[0,&#39;Start&#39;]),int(hits.loc[0,&#39;End&#39;]) . x = my_signal.signal[sta:end] . plt.plot(x) . [&lt;matplotlib.lines.Line2D at 0x2469d85cbb0&gt;] . We can visualize the marse . from scipy.signal import find_peaks . peak,height = find_peaks(np.abs(x)) . fig = plt.figure(figsize=[10,7]) plt.plot(peak,np.abs(x[peak]),label=&quot;Rectified Signal Envelope&quot;) plt.plot(np.abs(x),label=&quot;Absolute value of the signal&quot;) plt.legend() plt.ylabel(&quot;Voltage (mV)&quot;) plt.xlabel(&quot;Samples&quot;) . Text(0.5, 0, &#39;Samples&#39;) . marse(x,0,1e6) . 1.1382225000000001 . my_signal.get_interval_params(threshold=300,interval_seconds = 0.5) . Area_under_curve Crest-Factor End Energy File_Name Freq_Max_WT_KHz Kurtosis MARSE Peak_2_peak Peak_amplitude RMS Ring_down Skewnes StDev Start Variance Wavelet_Centroid Wavelet_Energy signal_strength . 0 -213.152503 | 1.478185 | 550000.0 | 8.322249e+18 | My Signal | 3906.25 | 1.638594 | 220.738546 | 575.0 | 575.0 | 388.990514 | 0.0 | 0.174882 | 33.441269 | 0.0 | 1118.318501 | 2465.603937 | 151252.151992 | 2.131527e+11 | . 1 -213.058956 | 1.463143 | 1050000.0 | 8.317900e+18 | My Signal | 3906.25 | 1.483920 | 220.654268 | 370.0 | 569.0 | 388.888868 | 0.0 | 0.206408 | 34.217218 | 500000.0 | 1170.817996 | 2460.932251 | 151254.579072 | 2.130593e+11 | . 2 -212.655229 | 1.481406 | 1550000.0 | 8.286095e+18 | My Signal | 3906.25 | 1.314486 | 220.284466 | 352.0 | 575.0 | 388.144652 | 0.0 | 0.220005 | 34.069708 | 1000000.0 | 1160.745018 | 2452.057007 | 150656.328354 | 2.126556e+11 | . 3 -212.490530 | 1.525521 | 2050000.0 | 8.282663e+18 | My Signal | 3906.25 | 1.487547 | 220.131850 | 411.0 | 592.0 | 388.064257 | 0.0 | 0.147190 | 36.466539 | 1500000.0 | 1329.808482 | 2451.267171 | 150562.155371 | 2.124909e+11 | . 4 -212.805975 | 1.521210 | 2550000.0 | 8.329670e+18 | My Signal | 3906.25 | 1.123565 | 220.465132 | 407.0 | 592.0 | 389.163915 | 0.0 | 0.171176 | 41.725031 | 2000000.0 | 1740.978244 | 2466.777316 | 151506.177266 | 2.128063e+11 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 101 -212.884896 | 1.497934 | 51050000.0 | 8.302771e+18 | My Signal | 3906.25 | 1.201337 | 221.067033 | 378.0 | 582.0 | 388.535027 | 0.0 | 0.155344 | 33.775690 | 50500000.0 | 1140.797250 | 2477.410712 | 150965.089208 | 2.128853e+11 | . 102 -212.737780 | 1.460256 | 51550000.0 | 8.292214e+18 | My Signal | 3906.25 | 1.401112 | 220.885825 | 377.0 | 567.0 | 388.287949 | 0.0 | 0.197658 | 33.997603 | 51000000.0 | 1155.837007 | 2476.677757 | 150776.444990 | 2.127382e+11 | . 103 -212.673462 | 1.543190 | 52050000.0 | 8.286624e+18 | My Signal | 3906.25 | 1.216247 | 220.792244 | 451.0 | 599.0 | 388.157032 | 0.0 | 0.133670 | 33.832416 | 51500000.0 | 1144.632371 | 2476.015274 | 150731.829673 | 2.126739e+11 | . 104 -212.830715 | 1.467516 | 52550000.0 | 8.297488e+18 | My Signal | 3906.25 | 1.519301 | 220.890797 | 372.0 | 570.0 | 388.411400 | 0.0 | 0.189315 | 33.481258 | 52000000.0 | 1120.994668 | 2467.649895 | 150867.036320 | 2.128311e+11 | . 105 -54.771238 | 1.405933 | 53050000.0 | 2.130652e+18 | My Signal | 3906.25 | 1.269949 | 56.837213 | 327.0 | 545.0 | 387.642998 | 0.0 | 0.192622 | 32.428805 | 52500000.0 | 1051.627376 | 2450.954435 | 150212.022680 | 5.477162e+10 | . 106 rows × 19 columns . The result is the following pandas.Dataframe where the data gets stored . my_signal.hits.head() . Area_under_curve Crest-Factor End Energy File_Name Freq_Max_WT_KHz Kurtosis MARSE Peak_2_peak Peak_amplitude RMS Ring_down Skewnes StDev Start Variance Wavelet_Centroid Wavelet_Energy signal_strength . 0 -0.611790 | 3.196290 | 10878526.0 | 4.636324e+16 | My Signal | 3906.25 | 0.151566 | 1.138223 | 2613.0 | 1777.0 | 555.957098 | 45.0 | 0.714149 | 312.498142 | 10877026.0 | 97655.088452 | 141214.938635 | 299148.473178 | 6.897280e+08 | . 1 -0.137538 | 3.055424 | 11313606.0 | 9.231808e+15 | My Signal | 3906.25 | 0.287634 | 0.261735 | 2176.0 | 1516.0 | 496.166846 | 8.0 | 0.688344 | 275.265497 | 11313231.0 | 75771.093803 | 107062.451472 | 255955.934005 | 1.548030e+08 | . 2 -1.597591 | 4.213310 | 11320234.0 | 1.563569e+17 | My Signal | 316406.25 | 2.025361 | 3.503319 | 4395.0 | 2594.0 | 615.668039 | 272.0 | 1.163714 | 363.005837 | 11316109.0 | 131773.237867 | 238245.228319 | 361230.656898 | 2.051224e+09 | . 3 -0.360289 | 3.106313 | 11751896.0 | 3.239226e+16 | My Signal | 3906.25 | 0.624231 | 0.679701 | 3366.0 | 1890.0 | 608.438395 | 35.0 | 0.841388 | 346.698090 | 11751021.0 | 120199.565709 | 124699.043673 | 355007.771606 | 4.374980e+08 | . 4 -0.571139 | 2.805567 | 11755159.0 | 3.735134e+16 | My Signal | 3906.25 | -0.148793 | 1.030927 | 2109.0 | 1400.0 | 499.007933 | 34.0 | 0.525056 | 263.331930 | 11753659.0 | 69343.705593 | 105451.250675 | 240876.815233 | 6.358040e+08 | . my_signal.get_summary() . Area_under_curve Crest-Factor End Energy File_Name Freq_Max_WT_KHz Kurtosis MARSE Peak_2_peak Peak_amplitude RMS Ring_down Skewnes StDev Start Variance Wavelet_Centroid Wavelet_Energy signal_strength . 0 -20362.156744 | 18.284442 | 52641791.0 | 8.108343e+20 | My Signal | 332031.25 | 118.048785 | 21604.947807 | 13544.0 | 7176.0 | 392.464814 | 186.0 | 4.821854 | 59.276962 | 0.0 | 3513.758256 | 5922.774726 | 154027.932424 | 2.042304e+13 | . Check function for single hits . my_signal.hits.columns . Index([&#39;Area_under_curve&#39;, &#39;Crest-Factor&#39;, &#39;End&#39;, &#39;Energy&#39;, &#39;File_Name&#39;, &#39;Freq_Max_WT_KHz&#39;, &#39;Kurtosis&#39;, &#39;MARSE&#39;, &#39;Peak_2_peak&#39;, &#39;Peak_amplitude&#39;, &#39;RMS&#39;, &#39;Ring_down&#39;, &#39;Skewnes&#39;, &#39;StDev&#39;, &#39;Start&#39;, &#39;Variance&#39;, &#39;Wavelet_Centroid&#39;, &#39;Wavelet_Energy&#39;, &#39;signal_strength&#39;], dtype=&#39;object&#39;) . Single Hit analysis . start,end = my_signal.hits.loc[25,[&#39;Start&#39;,&#39;End&#39;]] . x = my_signal.get_signal()[int(start):int(end)] . plt.plot(x) . [&lt;matplotlib.lines.Line2D at 0x2469ebbcd00&gt;] . wts = {*wavelet_params(x,&#39;db6&#39;,1e6)} . wts . {3906.25, 146841.01563516486, 257000.3584406268} . signal = x mother_wavelet = &#39;db6&#39; fs = 1e6 decomp_levels = 6 . PackageMatrix = pywt.WaveletPacket(data=signal, wavelet=mother_wavelet, maxlevel=decomp_levels) # n = len(sub_signal) mylevels = [node.path for node in PackageMatrix.get_level(decomp_levels, &#39;freq&#39;)] cwtmat = [] for level in mylevels: cwtmat.append(PackageMatrix[level].data**2) cwtmat = np.array(cwtmat) myfreq = np.arange(len(mylevels))*fs/(2**(1+decomp_levels)) myfreq += fs/(2**(2+decomp_levels)) wavelet_energy = np.mean(cwtmat,axis=1) # print(wavelet_energy) wt_centroid_Hz=(np.dot(myfreq,wavelet_energy)/np.sum(myfreq)) wt_energy=(np.mean(wavelet_energy)) # self.wavelt_matrix = cwtmat . map = sn.heatmap(cwtmat) plt.show() . Interval Analysis . . my_signal.interval_analyse(threshold=300 ,interval_seconds=0.5) .",
            "url": "https://pabloms92.github.io/research-blog/jupyter/2021/02/08/AE-test.html",
            "relUrl": "/jupyter/2021/02/08/AE-test.html",
            "date": " • Feb 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "First Post",
            "content": "Hello, In this first post I want to talk about why blogging? . For this I will address the following points: . Blogging in DataScience | Publications shared in a more user friendly way | .",
            "url": "https://pabloms92.github.io/research-blog/markdown/2021/02/02/first_post.html",
            "relUrl": "/markdown/2021/02/02/first_post.html",
            "date": " • Feb 2, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pabloms92.github.io/research-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pabloms92.github.io/research-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Currently working at the AMT More info comming soon I guess . Research Projects . Resume . Education . Lorem Ipsum et amet… . Wrok life . Lorem Ipsum et amet… . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pabloms92.github.io/research-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pabloms92.github.io/research-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}